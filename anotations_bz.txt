
UML
- Modelar o vocabulário do sistema, do ponto de vista utilizador/problema ou do implementador/solução
- Conjunto de objetos que interagem entre si
- Objeto é algo
	- Fronteiras bem definidas
	- Relevante para o problema
	- Com estado (atributos), comportamento
	- Identidade no tempo e no espaço
- Classe: conjunto de objetos com as mesmas propriedades
	- Um objeto de uma classe é uma instância da classe
	- A extensão de uma classe é o conjunto de instâncias da classe
- Nome das classes no singular com a primeira letra em maiúscula
- Para precisar o significado para um classe, deve-se explicar o que é (e não é) uma instância da classe
	- Um aluno é uma pessoa que está inscrita num curso ministrado numa escola.
	
- Universo: conjunto de todos os objetos num determinado domínio

- Representação de classes e objetos:
	- Diagrama de classes: Retângulo com o nome da classe
	- Diagrama de objetos: Retângulo com NomeObjeto:NomeClasse
	
- Atributo: propriedades de uma classe
	- Todos os objetos de uma classe são caracterizados pelos menos atributos
	- Valor de um atributo de um objeto nao pode mudar ao longo do tempo
	- São listados em outro retângulo abaixo do nome da classe
	- nome_atributo : tipo_atributo

- Associações 
	- Relação física ou lógica entre objetos das classes
	- Não gera novos objetos
	- Subconjunto do produto cartesiado das extensões
	- Binárias, auto-associação
	- Multiplicidade: muitos para muitos (* -> *), muitos para um (* -> 1), um para um (1 -> 1)
	- Associações n-árias: ligações que envolvem multiplos objetos

- Classe-associação
	- reúne as propriedades de associação e de classe
	
- Agregação
	- Parte-de (filho)
	- Objetos mais complexos a partir de objetos mais simples
	- Um parágrafo faz parte de um texto
- Generalização
	- Subclasse -> Superclasse (Aluno -> Pessoa)
	- Subclasse é mais especializado do que uma superclasse que é mais generalizada
	
- Agregação x Generalização: Uma classe não existe sem seus agregados, o que não acontece com a generalização (exemplo, computador não funciona sem processador)

Princípios para criar classes:

Modularidade: cada classe tem uma únida responsabilidade
Escalabilidade: novos tipos de dados podem ser integrados na estrutura facilmente
Reusabilidade: classes pode ser reutilizadas atraves do sistema

Dados:
OK 1. idcontrato: id único de cada contrato
OK 2. tipoContrato: texto com breve descrição
OK 3. tipoprocedimento: texto com procedmento
OK 4. objectoContrato: texto com o objetivo do contrato
OK 5. Adjudicante: Quem "lança" o concurso
OK 6. Adjudicatarios: Pessoa que beneficia da atribuição (O que fazer se tiver mais que um?)
OK 7. dataPublicacao: data de publicação do concurso
OK 8. dataCelebracaoContrato: data de celebração do contrato
OK 9. precoContratual: float com o preço do contrato
OK 10. cpv: Common Procurement Vocabulary da UE, que descreve o objeto
OK 11. localExecucao: String (Portugal, Distrito, Concelho)
OK 12. fundamentacao: Artigo fundamentador
13. ProcedimentoCentralizado: Sim ou Não (Mudar para T ou F?)
14. DescrAcordoQuadro: string com descrição
